name: auto-update

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

jobs:
  auto-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.AUTO_UPDATE_TOKEN }}

      - name: Get latest version
        id: cuda-version
        run: |
          CUDA_VERSION="$(curl -fSL https://developer.nvidia.com/cuda-toolkit-archive | grep -P -oh 'CUDA Toolkit (\d+).(\d+).(\d+)(\s*)</a>' | grep -P -oh '(\d+).(\d+).(\d+)' | sort -nr | head -n1)"
          echo "Latest CUDA version: ${CUDA_VRESION}"
          echo "tag=v${CUDA_VERSION}" >> $GITHUB_OUTPUT
          grep "${CUDA_VERSION}" src/links/linux-links.ts && echo "exists=true" >> $GITHUB_OUTPUT || echo "exists=false" >> $GITHUB_OUTPUT

      - name: Set Node.js 20.x
        if: steps.cuda-version.outputs.exists == 'false'
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        if: steps.cuda-version.outputs.exists == 'false'
        run: npm ci
      
      - name: Update if tag not exists
        if: steps.cuda-version.outputs.exists == 'false'
        run: |
          curl -fSL https://developer.nvidia.com/cuda-downloads.json -o cuda-downloads.json
          CUDA_VERSION=${{ steps.cuda-version.outputs.tag }}
          CUDA_VERSION=${CUDA_VERSION##v}
          
          LINUX_X86_64_LOCAL_RUNFILE="$(cat cuda-downloads.json | jq -r '[.data | .releases | .[] | select(.arch=="x86_64" and .os=="Linux" and .format=="runfile" and .installer=="local" and .distro_name=="Ubuntu")] | sort_by(.distro_version) | first | .details' | grep -P -oh 'targetDownloadButtonHref" href="(.*?)"' | grep -P -oh 'https://(.*?).run')"
          echo "Linux x86_64 local runfile: ${LINUX_X86_64_LOCAL_RUNFILE}"

          WINDOWS_X86_64_LOCAL="$(cat cuda-downloads.json| jq -r '[.data | .releases | .[] | select(.arch=="x86_64" and .os=="Windows" and .installer=="local" and .os_version=="Server2022")] | first | .details' | grep -P -oh 'targetDownloadButtonHref" href="(.*?)"' | grep -P -oh 'https://(.*?).exe')"
          echo "Windows x86_64 local installer: ${WINDOWS_X86_64_LOCAL}"

          WINDOWS_X86_64_NETWORK="$(cat cuda-downloads.json| jq -r '[.data | .releases | .[] | select(.arch=="x86_64" and .os=="Windows" and .installer=="network" and .os_version=="Server2022")] | first | .details' | grep -P -oh 'targetDownloadButtonHref" href="(.*?)"' | grep -P -oh 'https://(.*?).exe')"
          echo "Windows x86_64 network installer: ${WINDOWS_X86_64_NETWORK}"
          
          rm -f cuda-downloads.json

          # Update src/links/linux-links.ts
          LINE="$(grep -n 'this.cudaVersionToURL = new Map' src/links/linux-links.ts | awk -F: '{print $1}')"
          head -n "${LINE}" src/links/linux-links.ts > new-linux-links.ts
          cat <<EOF >> new-linux-links.ts
                [
                  '${CUDA_VERSION}',
                  '${LINUX_X86_64_LOCAL_RUNFILE}'
                ],
          EOF
          LINE=$((LINE + 1))
          tail -n "+${LINE}" src/links/linux-links.ts >> new-linux-links.ts
          mv new-linux-links.ts src/links/linux-links.ts

          # Update src/links/windows-links.ts (local installer)
          LINE="$(grep -n 'this.cudaVersionToURL' src/links/windows-links.ts | awk -F: '{print $1}')"
          head -n "${LINE}" src/links/windows-links.ts > new-windows-links.ts
          cat <<EOF >> new-windows-links.ts
                [
                  '${CUDA_VERSION}',
                  '${WINDOWS_X86_64_LOCAL}'
                ],
          EOF
          LINE=$((LINE + 1))
          tail -n "+${LINE}" src/links/windows-links.ts >> new-windows-links.ts
          mv new-windows-links.ts src/links/windows-links.ts

          # Update src/links/windows-links.ts (network installer)
          LINE="$(grep -n 'private cudaVersionToNetworkUrl' src/links/windows-links.ts | awk -F: '{print $1}')"
          head -n "${LINE}" src/links/windows-links.ts > new-windows-links.ts
          cat <<EOF >> new-windows-links.ts
              [
                '${CUDA_VERSION}',
                '${WINDOWS_X86_64_NETWORK}'
              ],
          EOF
          LINE=$((LINE + 1))
          tail -n "+${LINE}" src/links/windows-links.ts >> new-windows-links.ts
          mv new-windows-links.ts src/links/windows-links.ts

          python3 update-cudnn.py

          npm run build && npm run format && npm run lint && npm run package

          git config user.name github-actions
          git config user.email github-actions@github.com
          git add src/links/linux-links.ts src/links/windows-links.ts dist/* package.json
          git commit -m "Update CUDA version to ${CUDA_VERSION}"
          git push
